{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Reactgit\\\\eventappreacthooks\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nvar ImageTogglerOnScroll = function ImageTogglerOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    width: \"200\",\n    height: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\Reactgit\\eventappreacthooks\\src\\ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAkC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAE3D,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AAF2D,kBAG1BE,QAAQ,CAAC,IAAD,CAHkB;AAAA,MAGpDK,SAHoD;AAAA,MAG1CC,YAH0C;;AAK3DP,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAS,YAAM;AACXC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GAPQ,EAOP,CAACJ,SAAD,CAPO,CAAT;;AAL2D,mBAchCL,QAAQ,CAAC,KAAD,CAdwB;AAAA,MAcpDa,MAdoD;AAAA,MAc7CH,SAd6C;;AAgB3D,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AAClB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,IAAAA,SAAS,CAAC,YAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SAAON,SAAS,GAAG,IAAH,GACZ;AACI,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UADjC;AAEI,IAAA,GAAG,EAAC,EAFR;AAEW,IAAA,GAAG,EAAEE,QAFhB;AAE0B,IAAA,KAAK,EAAC,KAFhC;AAEsC,IAAA,MAAM,EAAC,KAF7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CApCD;;AAsCA,eAAeH,oBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from \"react\";\r\n\r\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\r\n\r\n    const imageRef = useRef(null);\r\n    const [isLoading,setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scrollHandler);\r\n        setInView(isInView());\r\n        setIsLoading(false);\r\n        return ( () => {\r\n            window.removeEventListener(\"scroll\", scrollHandler);\r\n        });\r\n    },[isLoading]);\r\n\r\n    const [inView,setInView] = useState(false);\r\n\r\n    const isInView = () => {\r\n        if (imageRef.current) {\r\n            const rect = imageRef.current.getBoundingClientRect();\r\n            return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const scrollHandler = () => {\r\n        setInView(() => {\r\n            return isInView();\r\n        });\r\n    };\r\n\r\n    return isLoading ? null : (\r\n        <img\r\n            src={inView ? secondaryImg : primaryImg}\r\n            alt=\"\" ref={imageRef} width=\"200\" height=\"200\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default ImageTogglerOnScroll;"]},"metadata":{},"sourceType":"module"}